pipeline {
  agent any

  tools {
    maven "maven-3.9.3"
  }
  triggers {
  // Poll repo every 2 minutes for changes
  pollSCM('*/2 * * * *')
  }

  parameters {
    choice(
      choices: ['main', 'sheshir'],
      description: 'Select the branch to clone',
      name: 'BRANCH'
    )
    booleanParam(
      defaultValue: true,
      description: 'Start from the beginning of the pipeline or from "Remove existing pods" stage',
      name: 'START_FROM_1st_STAGE'
    )
  }

  stages {
    stage('Source Code Pulling') {
      when {
        expression { params.START_FROM_1st_STAGE == true }
      }
      steps {
        git branch: params.BRANCH, credentialsId: 'gittu', url: 'git@github.com:MahmudulHasanSheshir/YSD_B02_DevOps_Library_Management_System.git'
      }
    }

    stage('Build Artifact') {
      steps {
        sh 'mvn clean install'
      }
    }
    
    stage('Build and Dockerize') {
      steps {
        // Build your Java artifact here using Maven or any other build tool

        // Docker build and tag the image
        script {
          def imageName = 'mahmudulhasansheshir/spark'
          def imageTag = 'latest'
          def dockerfile = 'Dockerfile'

          sh "docker build -t ${imageName}:${imageTag} -f ${dockerfile} ."
        }
      }
    }
    
    stage('Push Image') {
      steps {
        withDockerRegistry(credentialsId: 'docker', url:'') {
          sh "docker push mahmudulhasansheshir/spark:latest"
        }
      }
    }
    
    stage('Remove existing pods') {
      when {
        expression { params.START_FROM_1st_STAGE == true }
      }
      steps {
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-cred', namespace: '', serverUrl: '']]) {
          sh "kubectl delete -f mysql-service.yaml"
          sh "kubectl delete -f mysql-deployment.yaml"
          sh "kubectl delete -f mysql-pvc.yaml"
          sh "kubectl delete -f mysql-pv.yaml"
          sh "kubectl delete -f mysql-secret.yaml"
          sh "kubectl delete -f sparklms-service.yaml"
          sh "kubectl delete -f sparklms-deployment.yaml"
        }
      }
    }
    
    stage('Deploy MySQL pod') {
      steps {
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-cred', namespace: '', serverUrl: '']]) {
          sh "kubectl apply -f mysql-secret.yaml"
          sh "kubectl apply -f mysql-pv.yaml"
          sh "kubectl apply -f mysql-pvc.yaml"
          sh "kubectl apply -f mysql-deployment.yaml"
          sh "kubectl apply -f mysql-service.yaml && sleep 15s"
        }
      }
    }
    
    stage('Deploy Application pod') {
      steps {
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-cred', namespace: '', serverUrl: '']]) {
          sh "kubectl apply -f sparklms-deployment.yaml"
          sh "kubectl apply -f sparklms-service.yaml && sleep 2s"
          sh "kubectl get services -n sheshir-namespace"
        }
      }
    }
  }
  post {
      always {
        // Clean up the workspace after the pipeline execution
        cleanWs()
      }
    }
  
}
